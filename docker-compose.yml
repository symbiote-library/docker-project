version: '2'
services:
  apache:
    image: "symbiote/apache2:latest"
    depends_on: 
      - mysql
    ports:
      - "80:80"
      - "443:443"
    links:
      - php:php
    working_dir: /var/www/html
    volumes:
      - .:/var/www/html
      - ${DOCKER_PROJECT_PATH}/logs:/var/log/apache2
  php:
    image: "symbiote/php-fpm:${DOCKER_PHP_VERSION}"
    links:
      - mysql:mysql
    volumes:
      - '.:/var/www/html'
      - ${DOCKER_PROJECT_PATH}/logs:/var/log/php
      - ${DOCKER_PROJECT_PATH}/logs:/var/log/silverstripe
    # Enable xdebug via the env var DOCKER_PHP_COMMAND.
    # Note: there needs to be an '&&' at the end.
    command: bash -c "${DOCKER_PHP_COMMAND} php-fpm"

  node:
    image: "symbiote/node:${DOCKER_NODE_VERSION}"
    tty: true
    working_dir: /tmp
    volumes:
      - '.:/tmp'
    command: ["/bin/bash"]

  # Uses the same image as php, but executes as a separate container
  # to enable tty, and allow for SSH access which we will keep separate
  # from the web container. Will revisit this at some point as it's 
  # more efficient to use the same container for both
  phpcli:
    image: "symbiote/php-cli:${DOCKER_PHP_VERSION}"
    links:
      - mysql:mysql
    tty: true
    working_dir: /var/www/html
    environment:
      SSH_AUTH_SOCK: "/tmp/ssh_agent_socket"
      GIT_COMMIT: ${CI_COMMIT_SHA}
      GIT_BRANCH: ${CI_COMMIT_REF_SLUG}
      COMPOSER_PROCESS_TIMEOUT: ${DOCKER_COMPOSER_TIMEOUT}
    volumes:
      - '.:/var/www/html'
      - ${DOCKER_SHARED_PATH}/composer-cache:/usr/local/composer/cache
      - ${DOCKER_PROJECT_PATH}/logs:/var/log/php
      - ${DOCKER_PROJECT_PATH}/logs:/var/log/silverstripe
      - $SSH_AUTH_SOCK:/tmp/ssh_agent_socket
      - ${DOCKER_SSH_VOLUME}
    command: ["/bin/bash"]

  sqsrunner:
    image: "symbiote/php-cli:${DOCKER_PHP_VERSION}"
    links: 
      - mysql:mysql
    tty: false
    working_dir: /var/www/html
    volumes:
      - '.:/var/www/html'
      - ${DOCKER_PROJECT_PATH}/logs:/var/log/php
      - ${DOCKER_PROJECT_PATH}/logs:/var/log/silverstripe
    command: [
      "php",
      "sqs-jobqueue/central-runner.php",
    ]

  queuedjobs:
    image: "symbiote/php-cli:${DOCKER_PHP_VERSION}"
    links: 
      - mysql:mysql
    tty: false
    working_dir: /var/www/html
    volumes:
      - '.:/var/www/html'
      - ${DOCKER_PROJECT_PATH}/logs:/var/log/php
      - ${DOCKER_PROJECT_PATH}/logs:/var/log/silverstripe
    command: [
      "/bin/bash",
      "-c",
      "while :; do php /var/www/html/${DOCKER_CLISCRIPT_PATH} dev/tasks/ProcessJobQueueTask queue=2 >> /var/log/php/queuedjob.log; php /var/www/html/${DOCKER_CLISCRIPT_PATH} dev/tasks/ProcessJobQueueTask queue=3 >> /var/log/php/queuedjob.log; sleep 30; done"  
    ]
  
  adminer: 
    image: "adminer:4.6-standalone"
    environment:
      ADMINER_DESIGN: nette
      ADMINER_DEFAULT_SERVER: mysql
    depends_on:
      - mysql
    links:
      - mysql:mysql
    ports:
      - "8080:8080"

  mysql:
    image: "mysql:${DOCKER_MYSQL_VERSION}"
    ports:
      - "3306:3306"
    volumes:
      - "${DOCKER_PROJECT_PATH}/mysql-data:/var/lib/mysql"
    environment:
        MYSQL_ROOT_PASSWORD: "password"
        MYSQL_ROOT_HOST: "%"
    # Fixes MySQL has gone away issues with small default packet size, also fixes BLOB/TEXT exceeding 10% of log size issue
    command: mysqld --max_allowed_packet=64M --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --innodb-log-file-size=64M

  redis:
    image: "redis:3.2-alpine"
    ports:
      - "6379:6379"
    volumes:
      - ${DOCKER_PROJECT_PATH}/redis-data:/data

  elastic:
    image: "docker.elastic.co/elasticsearch/elasticsearch:5.3.3"
    ports: 
      - "9200:9200"
    environment:
      - "http.host=0.0.0.0"
      - "transport.host=127.0.0.1"
      - "xpack.security.enabled=false"
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - ${DOCKER_PROJECT_PATH}/elastic-data:/usr/share/elasticsearch/data

  # NOTE: This expects the solr module to have been downloaded _first_ 
  # before you run this container! Otherwise you _will_ get permission
  # issues
  solr: 
    image: solr:5.5
    ports:
      - "8983:8983"
    volumes:
      - ${DOCKER_PROJECT_PATH}/solr-logs:/opt/solr/server/logs
      - ${DOCKER_PROJECT_PATH}/solr-data:/opt/solr/server/solr/mycores/
      - ./solr/docker-configs/conf-5.5:/myconfig
    entrypoint:
      - docker-entrypoint.sh
      - solr-precreate
      - project
      - /myconfig

  selenium:
    image: symbiote/selenium-chrome:2.53.1
    depends_on:
      - apache
    environment: 
      WEB_NAME: apache
    ports:
      - "4444:4444"
    volumes:
      - /dev/shm:/dev/shm

  mailhog:
    image: "mailhog/mailhog:v1.0.0"
    ports:
      - "1025:1025"
      - "8025:8025"

  mongo:
    image: mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password

  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: password
